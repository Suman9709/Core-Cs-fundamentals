1. What is oops?
OOps refer to Object Oriented Programming. It is the Programming paradigms that is defined using objects. 
Object can be considered as real-world instance of entities like class, that have some charactreristics and behaviors.

2. What is the need for OOPs?
There are many reason why OOPs is mostly prefered, but the most important among theme are:
    -> Reusability: You can create code once and reuse it in different parts of the program, saving time and effort.
    -> Modularity: It breaks the code into smaller, manageable parts (called objects), making it easier to understand and maintain.
    -> Data Security: It protects sensitive data by restricting access through concepts like encapsulation (like keeping private details hidden).
    -> Flexibility: With inheritance, you can create new features based on existing ones without writing everything from scratch.
    -> Real-World Representation: OOP allows you to model real-world objects, like a car or a person, in your code, making it more relatable and easier to understand.

3.  What are some other Programming paradigms other than oops?
Other than OOPs there are several Programming paradigms, each with it's own approach to solve problems. Here are some of them:

1-> Procedural Programming
    ->Follow a step by step approach, breaking the program into function or procedures
    eg:- C language
2-> Functional Programming
    -> Focuses on pure function, immutability and avoiding side effects.
       eg:- Haskell, javascript with library like React
3-> Declarative Programming
    -> Focuses on what the program should do, not how it should be done.
       eg:- SQL, HTML, CSS 
4-> Imperative Programming
    -> Directly tells the computer how to perform task step by step.
5-> Logical Programming
    -> Uses logic and rules to infer conclusions
       eg:- Prolog
6-> Event-Driven Programming
    -> Responds to user or system-generated events
        eg:- js in web development

4. What is meant by Structured Programming?
Structured Programming is a Programming paradigms that emphasize breaking a program into small, manageable, and logical units or blocks.
It follows a top-down approach, where a problem is divided into samller sub-problems or modules which can be solved independently

Key Features:
-> Sequentail Execution: Code is executed step by step in a logical flow 
-> use of control structures: It relies on control structures like
        -> Sequence
        -> Selection
        -> Iteration
        -> No Goto Statement: it avoid the use of goto Statement, which lead to difficult to follow code
-> Modularity: The program is divided inti smaller, resuable function or procedures.
-> Imporved Readability and Maintainability: Since the code is organized in a structured mannner, it's easier to understand and debug


5. What are the main features of OOPs?
OOPs or Object Oriented Programming mainly comprise of the below four features and make sure yoou don't miss any of these:
    -> Inheritance
    -> Encapsulation
    -> Polymorphism
    -> Data Abstraction

6. What are some advantages of using OOPs?
    -> Code Reusability(Inheritance)
        ->you can create new classes based on existing ones, saveing time and effort.
    ->Data Security(Encapsulation)
        -> Protects data by keeping it private and only accessible through methods.
    -> Improved Code organisation (Modularity)
        -> Dividde the code int o objects and classes, making it easier to manage and debug
    -> Code Flexibility(Polymorphism)
        -> Allow objects to behave differently based on the context.
    -> Real World Modeling
        -> Mimics real-world object and behav, making the code mre intutive and easir to understand.
        eg:- A BankAccount class can have attributes like balance and methods like deposit() and withdraw().

7. What is Class?
In OOPs a class is like a blueprint or template used to create objects. It contains some values,
known as member data or member, and some set of rules, known as behaviors or
functions.So when an object is created, it automatically takes the data and functions
that are defined in the class.

8. What is Object?
An object refers to the instance of the class, which contains the instance of the members and behaviors defined in the class template.
In the real world, an object is an actual entity to which a user interact, whereas class is just the blueprint for that object. 

9.  What is encapsulation?
Encapsulation is one of the core concepts of Object Oriented Programming that involves hiding the internal details of an objects and restricting direct access of its data.
One can visualize Encapsulation as the method of putting everything that is required
to do the job, inside a capsule and presenting that capsule to the user. What it means
is that by Encapsulation, all the necessary data and methods are bind together and
all the unnecessary details are hidden to the normal user. So Encapsulation is the
process of binding data members and methods of a program together to do a specific
job, without revealing unnecessary details

Why Encapsulation important?
-> Protect sensitive data from unauthorized access
-> Prevents accidental modifications of data
-> Imporve security and code maintainability

1-> Data Hiding:- Encapsulation is the process of  hiding unwanted information such as, restricting access to any members of an object.
2-> Data binding: Encapsulation is the process of binding the data members and the methods together as a whole, as a class.


10. What is Polymorphism?
Polymorphism is composed of two words - “poly” which means “many”, and “morph”
which means “shapes”. Therefore Polymorphism refers to something that has many
shapes.
In OOPs, Polymorphism refers to the process by which some code, data, method, or
object behaves differently under different circumstances or contexts. Compile-time
polymorphism and Run time polymorphism are the two types of polymorphisms in
OOPs languages


Two type of PolyMorphism is 
->Compile time
->Run time

11. What is Compile time Polymorphism and how is it different from Runtime Polymorphism?
Compile time polymorphism: It is also known as Static Polymorphism, refers to the type of Polymorphism that happens at compile time.
What it means is that the compiler decides what shape or value has to be taken by the entity in the picture.

Runtime Polymorphism: Runtime polymorphism, also known as Dynamic Polymorphism, refers to the type of Polymorphism that happens
at the run time.
What it means is it can't be decided by the compiler. Therefore what shape or value
has to be taken depends upon the execution. Hence the name Runtime Polymorphism.

12. How does C++ support Polymorphism?
C++ is an Object-oriented programming language and it supports Polymorphism as
well:
Compile Time Polymorphism: C++ supports compile-time polymorphism with the help of features like templates, 
function overloading, and default arguments.

Runtime Polymorphism: C++ supports Runtime polymorphism with the help of features like virtual functions. 
Virtual functions take the shape of the functions based on the type of object in reference and are resolved at runtime.


13. What is meant by Inheritance?
Inheritance is a key concept of Object-Oriented Programming (OOP) that allows a child class (derived class) to inherit properties and methods from a parent class (base class).

Why is inheritance  important?
    -> Code Reusability: Avoids code duplication by reusing code from the base class.
    -> Improved Code Structure: Provides a hierarchical relationship between classes.
    -> Extensibility: Allows adding new features to the child class without modifying the base class.

14. What is Abstraction?
If you are a user, and you have a problem statement, you don't want to know how the
components of the software work, or how it's made. You only want to know how the
software solves your problem. Abstraction is the method of hiding unnecessary
details from the necessary ones. It is one of the main features of OOPs.
For example, consider a car. You only need to know how to run a car, and not how the
wires are connected inside it. This is obtained using Abstraction.

why is Abstraction important?
    -> Reduces complexity.
    -> Improves security by hiding sensitive data.
    -> Enhances code maintainability.

15. How much memory does a class occupy?
In C++, the memory occupied by a class itself is zero,
but when an object of the class is created, the memory is allocated based on the class's data members and additional factors like virtual functions.

Factor affecting memory size
    -> Data members (variables): The size depends on the data types used (e.g., int, float, char, etc.).
    -> Padding and alignment: The compiler adds padding for memory alignment, which can increase size.
    -> Virtual functions: If a class has virtual functions, a vtable pointer (usually 8 bytes) is added to each object.
    -> Static members: These are stored in static memory and not within the object itself.

16. Is it always necessary to create objects from class?
No. An object is necessary to be created if the base class has non-static methods. But
if the class has static methods, then objects don’t need to be created. You can call the
class method directly in this case, using the class name.


17. What is COnstructor?
A Constructor is a special member function in C++ that is automatically called when an object of the class is created.

Key Characteristics of Constructor:
    ->Same name as the class name.
    ->No return type (not even void).
    ->Automatically invoked when an object is created.
    ->Used to initialize objects.


18. What are the various types of constructors in C++?

Default Constructor:- Initializes objects with default values.
Parameterized Constructor:- Allows passing arguments during object creation.
Copy Constructor:- Creates a copy of an existing object.

19. What is a copy constructor?
Copy Constructor is a type of constructor, whose purpose is to copy an object to
another. What it means is that a copy constructor will clone an object and its values,
into another object, is provided that both the objects are of the same class.

20. What is a destructor?
A Destructor in C++ is a special member function that is automatically called when an object goes out of scope or is explicitly deleted.

Why Do We Need a Destructor?
    ->To free up memory allocated dynamically.
    ->To close file handles or database connections.
    ->To release resources like network sockets.

Important Points:
-> If the user doesn't define a destructor, the C++ compiler provides a default destructor.
-> A virtual destructor is used in inheritance to ensure proper destruction of derived class objects.

21. Are class and structure the same? If not, what's the
difference between a class and a structure?

-> No, class and structure are not same. Through they appear to be similar, they have difference that makes them apart. 
eg-> the structure is saved in the stack memory whereas the class is saved in heap memory.  Also data abstraction cannot be achived with the help of structure but with class, Abstraction majorily used.


23. Explain Inheritance?
-> Inheritance is one of the majot features of oops by  which an entity inherit some Characteristics and behaviour of some other entity and makes them their own. Inheritance helps to improve and facilitate code reuse.

24. Are there any limitations of inheritance?
-> Yes, with more power comes more complications. Inheritance is very powerful features in OOPs, but it has some limitations too.
   -> Inheritance need more time to navigate through multiple classes for its implementation.
   -> The class involved in inheritance- the base class and the child class, are very tightly coupled together. so if one needs to do nested changes in both classes.
   -> Inheritance might be complex for implementation, as well.

25. What are the various types of inheritance?
The various types of inheritance include:-
    1) Single inheritance
        A subclass inherits from a single base class.
    2) Multiple inheritance
        A subclass inherits from more than one base class.
    3) multi-level inheritance
        A class derives from another derived class (a chain of inheritance).
        Example: Grandparent → Parent → Child.
    4) hierarchical inheritance
        Multiple subclasses inherit from a single base class.
        Example: Dog, Cat, and Horse all inheriting from Animal
    5) Hybrid inheritance.
        A combination of two or more types of inheritance (like multiple and hierarchical).

26. What is subClass?
    -> The subclass is a part of inheritance. It is an entity which inherit from another class. it is also known as child class.

27. What is super Class?
    -> The super class is a part of inheritance. It is an entity which allow subclass or child class to inherit from itself.

28. What is interface?
    -> To create an interface, first we need to understand the rules that governs the behaviour of interface:

        -> Interface only contains the declaration of the methods not definition.
        -> Interface methods must be declared public.
        -> Any class can implement/inherit any interface.
        -> The implementing class must provide the definition of the methods.
        -> Instance of interface cannot be created.

29. What is difference between function overloading and function overriding?
    Function Overloading (Same name, different parameters – in same class)
        Definition:
        When you have multiple functions with the same name in the same class, but they have different number or types of parameters, it's called Function Overloading.
        NOTE:- It happens in Compile Time.


    Function Overriding (Same name, same parameters – in different classes with inheritance)
        Definition:
        When a child class has a function with the same name and same parameters as a function in the parent class, it is called Function Overriding.
        NOTE:- It happens in Run Time.


30. What is an Abstract Class (in Simple Language)
    An abstract class is a blueprint for other classes. You cannot create an object of an abstract class. It is used when you want to 
    provide a base structure that other classes must follow, but you leave some details to be filled in later (by the child classes).

    Key Points:
    An abstract class has at least one pure virtual function.
    It is used in inheritance.
    You cannot make objects of an abstract class.
    Child classes must implement the abstract (pure virtual) functions.

31.  How is an abstract class different from an interface?

| Feature              | **Abstract Class**                                                                               | **Interface**                                                                                                                   |
| -------------------- | ------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------- |
| **Purpose**          | Acts as a partial blueprint – allows some methods to be defined, some left for child classes     | Acts as a **complete contract** – all methods are to be implemented by child classes                                            |
| **Contains**         | Can have abstract (pure virtual) and **concrete** methods (with code)                            | Contains **only abstract methods** (in C++). In Java 8+, it can have default/static methods too                                 |
| **Object Creation**  | Cannot create objects                                                                            | Cannot create objects                                                                                                           |
| **Inheritance**      | A class can inherit only one abstract class in C++                                               | A class can implement **multiple interfaces**                                                                                   |
| **Access Modifiers** | Can have any: `public`, `protected`, `private`                                                   | All methods are **public** by default (in Java). In C++, no such keyword — just abstract class with only pure virtual functions |


32. What are access specifiers and what is their significance?

    Access Specifiers in C++ (and other OOP languages like Java) define the visibility or access level of class members (variables and functions) from outside the class.
    They control who can access what in a program.

    The 3 Main Access Specifiers in C++:
            Access Specifier |	Accessible Within Class |	Accessible in Derived Class |	Accessible Outside Class
            public	         |  ✅ Yes	               |          ✅ Yes              |            ✅ Yes  
            protected        |	✅ Yes		           |          ✅ Yes              |            ❌ No
            private          |	✅ Yes	               |          ❌ No               |            ❌ No

        Simple Meaning:
        public – "Everyone can access it"
        private – "Only I (the class) can access it"
        protected – "I and my children (derived classes) can access it"

33. What is an exception?
->  An exception is an unexpected error that occurs during the execution of a program.
    It interrupts the normal flow of the program. Instead of the program crashing, we can catch the exception and handle it gracefully.

34. What is meant by exception handling?
->  Exception Handling means catching and managing errors that happen while the program is running, so the program doesn’t crash and can continue or end gracefully.

    It’s like putting a safety net in your program.
    If something goes wrong, instead of crashing, the program jumps to the safety net (error-handling code).

35. What is meant by Garbage Collection in OOPs world?
->  Garbage Collection is the process of automatically freeing up memory that is no longer being used by the program.

In simple words:
"Garbage Collection" means deleting or cleaning up unused objects from memory to keep your program efficient and avoid memory leaks.

36. Why is it needed?
->  In Object-Oriented Programming (OOP), we create a lot of objects.
    Some of them are no longer needed after a certain point.
    If we don't delete them, they stay in memory and waste space (this is called a memory leak).

37. How Garbage Collection Helps:
    Without GC	With GC
    You must manually free memory	Memory is automatically freed
    Easy to forget or misuse	Safe and automated
    Risk of memory leaks	Reduces memory leaks

